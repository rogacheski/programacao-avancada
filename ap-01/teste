#pragma once

class AluguelCarro
{
private:
  Data _dataInicio;
  Data _dataEntrega;
  Carro _carro;
  Cliente _cliente;
  
public:
  AluguelCarro(Cliente &cliente, Carro &carro, Data &dataInicio) : _cliente(cliente), _carro(carro), _dataInicio(dataInicio) {};
  void realizarDevolucao(Data &dataEntrega) { _dataEntrega = dataEntrega };
  float calcularTotal const() { return (((_dataEntrega._ano - _dataInicio._ano) * 365) + ((_dataEntrega._mes - _dataInicio._mes) * 30) + (_dataEntrega._dia - _dataInicio._dia)) * _carro._valor };
};

class GerenciadorAluguel
{
private:
  AluguelCarro _aluguelCarro;
  AluguelBicicleta _aluguelBicicleta;

public:
  void imprimir() const;
};

-------------------------
  void GerenciadorAluguel::imprimir const()
  {
    cout << setfill('0') << "Data inicial de aluguel: "; _aluguelCarro._dataInicio._imprime();
    cout << setfill('0') << "Data final de aluguel: "; _aluguelCarro_dataEntrega._imprime();
    cout << "Codigo: " << _aluguelCarro._carro._codigo << endl;
    cout << "Cor: " << _aluguelCarro._carro._cor << endl;
    cout << "Placa: " << _aluguelCarro._carro._placa << endl;
    cout << "Combustivel: " << _aluguelCarro._carro._combustivel << endl;
    cout << "Quilometragem: " << _aluguelCarro._carro._quilometragem << endl;
    cout << "Valor: " << _aluguelCarro._carro._valor << endl;
    cout << "DisponÃ­vel: " << __aluguelCarro._carro._disponivel << endl;
  }
-------------------------

class Cliente
{
private:
  int _codigo = 0;
  std::string _nome = "";
  Data _aniversario;
  
public:
  Cliente();
  Cliente(int codigo, std::string nome, Data &aniversario) : _codigo(codigo), _nome(nome), _aniversario(aniversario) {};
  void imprime const();
};

------------------------------------
void Cliente::imprime const()
{
  cout << "Codigo: " << _codigo << endl;
  cout << "Nome: " << _nome << endl;
  cout << setfill('0') << "Aniversario: "; _aniversario._imprime();
}
------------------------------------

class Data
{
private:
  int _dia;
  int _mes;
  int _ano;
  
public:
  Data(int dia, int mes, int ano) : _dia(dia), _mes(mes), _ano(ano) {};
  void setDia(int dia) { _dia = dia; };
  void setMes(int mes) { _mes = mes; };
  void setAno(int ano) { _ano = ano; };
  int getDia() { return _dia; };
  int getMes() { return _mes; };
  int getAno() { return _ano; };
  int subtrair(Data outraData) { return ((_ano - outraData._ano) * 365) + ((_mes - outraData._mes) * 30) + (_dia - outraData._dia); };
  void imprime() { cout << setfill('0') << setw(2) << _dia << "/" << setw(2) << "/" << setw(4) << _ano << endl; };
};

class AluguelBicicleta
{
private:
  Data _dataInicio;
  Data _dataEntrega;
  Bicicleta _bicicleta;
  Cliente _cliente;
  
public:
  AluguelBicicleta(Cliente &cliente, Bicicleta &bicicleta, Data &dataInicio) : _dataInicio(dataInicio), _bicicleta(bicicleta), _cliente(cliente) {};
  void realizarDevolucao(Data &dataEntrega) { _dataEntrega = dataEntrega; };
  float calcularTotal() const { return (((_dataEntrega._ano - _dataInicio._ano) * 365) + ((_dataEntrega._mes - _dataInicio._mes) * 30) + (_dataEntrega._dia - _dataInicio._dia)) * _bicicleta._valor };
};

class Bicicleta
{
private:
  int _codigo = 0;
  std::string _placa = "";
  std::string _cor = "";
  int _valor = 0.0;
  bool _disponivel = 1;
  
public:
  Bicicleta();
  void setCodigo(int codigo) { _codigo = codigo; };
  void setPlaca(std::string placa) { _placa = placa; };
  void setCor(std::string) { _cor = cor; };
  void setValor(int valor) { _valor = valor; };
  int getCodigo const() { return _codigo; };
  std::string getPlaca const() { return _placa; };
  std::string getCor const() { return _cor; };
  int getValor const() { return _valor; };
  void imprime const();
  void aluga() { _disponivel = 0; };
  void devolve() { _disponivel = 1; };
};

------------------------
void Bicicleta::imprime const()
{
  
}
------------------------

class Carro
{
private:
  int _codigo;
  std::string _placa;
  std::string _cor;
  TipoCombustivel _combustivel;
  int _quilometragem;
  float _valor;
  bool _disponivel;
  
public:
  Carro();
  void setCodigo(int codigo);
  void setPlaca(std::string placa);
  void setCor(std::string cor);
  void setCombustivel(TipoCombustivel combustivel);
  void setValor(float valor);
  int getCodigo();
  std::string getPlaca();
  std::string getCor();
  TipoCombustivel getCombustivel();
  int getQuilometragem();
  float getValor();
  void imprime();
  void incrementaQuilometragem();
  void aluga();
  void devolve();
};

class TipoCombustivel
{
public:
  1 GASOLINA;
  2 ALCOOL;
  3 HIBRIDO;
  4 ELETRICO;
};
